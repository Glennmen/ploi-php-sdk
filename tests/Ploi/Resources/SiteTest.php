<?php

namespace Tests\Ploi\Resources;

use stdClass;
use Tests\BaseTest;
use Ploi\Http\Response;
use Ploi\Resources\Server;
use Ploi\Exceptions\Http\NotFound;
use Ploi\Exceptions\Resource\Server\Site\DomainAlreadyExists;

/**
 * Class SiteTest
 *
 * @package Tests\Ploi\Resources
 */
class SiteTest extends BaseTest
{
    /**
     * @var Server
     */
    private $server;

    public function setup()
    {
        parent::setup(); // TODO: Change the autogenerated stub

        $resource = $this->getPloi()->server();
        $allServers = $resource->get();
        if (!empty($allServers->getJson()->data)) {
            $this->server = $resource->setId($allServers->getJson()->data[0]->id);
        }
    }

    public function testGetAllSites()
    {
        $resource = $this->server->sites();

        $sites = $resource->get();

        $this->assertInstanceOf(Response::class, $sites);
        $this->assertInternalType('array', $sites->getJson()->data);
    }

    /**
     * @throws \Ploi\Exceptions\Http\InternalServerError
     * @throws \Ploi\Exceptions\Http\NotFound
     * @throws \Ploi\Exceptions\Http\NotValid
     * @throws \Ploi\Exceptions\Http\PerformingMaintenance
     * @throws \Ploi\Exceptions\Http\TooManyAttempts
     */
    public function testGetSingleSite()
    {
        $resource = $this->server->sites();
        $sites = $resource->get();

        if (!empty($sites->getJson()->data[0])) {
            $siteId = $sites->getJson()->data[0]->id;

            $resource->setId($siteId);
            $methodOne = $resource->get();
            $methodTwo = $this->server->sites($siteId)->get();
            $methodThree = $this->server->sites()->get($siteId);

            $this->assertInstanceOf(stdClass::class, $methodOne->getJson()->data);
            $this->assertEquals($siteId, $methodOne->getJson()->data->id);
            $this->assertEquals($siteId, $methodTwo->getJson()->data->id);
            $this->assertEquals($siteId, $methodThree->getJson()->data->id);
        }
    }

    public function testCreateExampleDotCom()
    {
        try {
            $response = $this->server->sites()->create('example.com');

            $this->assertInstanceOf(stdClass::class, $response);
            $this->assertNotEmpty($response->id);

            return $response;
        } catch (\Exception $e) {
            $this->assertInstanceOf(DomainAlreadyExists::class, $e);

            $allSites = $this->server->sites()->get();
            $foundSite = false;
            foreach ($allSites->getJson()->data as $site) {
                if ($foundSite) {
                    break;
                }

                if ($site->domain === 'example.com') {
                    $this->server->sites($site->id)->delete();

                    $this->testCreateExampleDotCom();
                }
            }
        }
    }

    /**
     * @depends testCreateExampleDotCom
     */
    public function testCreateDuplicateSite($site)
    {
        try {
            $this->server->sites()->create('example.com');
        } catch (\Exception $e) {
            $this->assertInstanceOf(DomainAlreadyExists::class, $e);

            $allSites = $this->server->sites()->get();
            $foundSite = false;
            foreach ($allSites->getJson()->data as $site) {
                if ($foundSite) {
                    break;
                }

                if ($site->domain === 'example.com') {
                    $foundSite = $site;
                }
            }

            return $foundSite;
        }
    }

    /**
     * @depends testCreateDuplicateSite
     */
    public function testDeleteSite($site)
    {
        if (!empty($site)) {
            $deleted = $this->server->sites($site->id)->delete();
            $this->assertTrue($deleted);
        }
    }

    public function testDeleteInvalidSite()
    {
        $deleted = $this->server->sites(0)->delete();
        $this->assertFalse($deleted);

        try {
            $this->server->sites()->delete(1);
        } catch (\Exception $e) {
            $this->assertInstanceOf(NotFound::class, $e);
        }
    }

    public function testLogs()
    {
        $resource = $this->server->sites();
        $sites = $resource->get();

        if (!empty($sites->getJson()->data[0])) {
            $siteId = $sites->getJson()->data[0]->id;

            $logs = $resource->logs($siteId);

            $this->assertInternalType('array', $logs);

            if (!empty($logs[0])) {
                $this->assertInstanceOf(stdClass::class, $logs[0]);
                $this->assertEquals($siteId, $logs[0]->site_id);
                $this->assertEquals($resource->getServer()->getId(), $logs[0]->server_id);
            }
        }
    }
}
